// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SK.TinyScheduler.Database;

#nullable disable

namespace Database.PostgreSQL.Migrations
{
    [DbContext(typeof(SchedulerDbContext))]
    [Migration("20240510135044_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SK.TinyScheduler.Database.Entities.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<string>("Cron")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cron");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("job");
                });

            modelBuilder.Entity("SK.TinyScheduler.Database.Entities.JobInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<string>("Cron")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cron");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.ToTable("job_instance");
                });

            modelBuilder.Entity("SK.TinyScheduler.Database.Entities.Step", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("BreakOnError")
                        .HasColumnType("boolean")
                        .HasColumnName("break_on_error");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasColumnName("job_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long?>("ParentStepId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_step_id");

                    b.Property<int>("Retries")
                        .HasColumnType("integer")
                        .HasColumnName("retries");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("script");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("ParentStepId");

                    b.ToTable("step");
                });

            modelBuilder.Entity("SK.TinyScheduler.Database.Entities.StepInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("BreakOnError")
                        .HasColumnType("boolean")
                        .HasColumnName("break_on_error");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<long>("JobInstanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("job_instance_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long?>("ParentStepId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_step_id");

                    b.Property<int>("Retries")
                        .HasColumnType("integer")
                        .HasColumnName("retries");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("script");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("JobInstanceId");

                    b.HasIndex("ParentStepId");

                    b.ToTable("step_instance");
                });

            modelBuilder.Entity("SK.TinyScheduler.Database.Entities.Step", b =>
                {
                    b.HasOne("SK.TinyScheduler.Database.Entities.Job", "Job")
                        .WithMany("Steps")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SK.TinyScheduler.Database.Entities.Step", null)
                        .WithMany("Steps")
                        .HasForeignKey("ParentStepId");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("SK.TinyScheduler.Database.Entities.StepInstance", b =>
                {
                    b.HasOne("SK.TinyScheduler.Database.Entities.JobInstance", "JobInstance")
                        .WithMany("Steps")
                        .HasForeignKey("JobInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SK.TinyScheduler.Database.Entities.StepInstance", null)
                        .WithMany("Steps")
                        .HasForeignKey("ParentStepId");

                    b.Navigation("JobInstance");
                });

            modelBuilder.Entity("SK.TinyScheduler.Database.Entities.Job", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("SK.TinyScheduler.Database.Entities.JobInstance", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("SK.TinyScheduler.Database.Entities.Step", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("SK.TinyScheduler.Database.Entities.StepInstance", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
